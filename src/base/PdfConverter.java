package base;

import com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl;
import java.awt.FileDialog;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import preprocessing.LineBreakGlue;
import preprocessing.NoiseHandler;
import preprocessing.PdfParser;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author prasad
 */
public class PdfConverter extends javax.swing.JDialog {

    /**
     * Creates new form PdfConverter
     */
	
	private String DIRECTORY = "";
	private String FILE = "";
	
	private boolean pdfStreamCorruption = false;
	
    public PdfConverter(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();
    }

    public void SetParent(SampleJForm parent)
    {
        this.parent = parent;
    }
    
    public void setPdfStreamCorruptionAlert (boolean value) {
    	pdfStreamCorruption = true;
    }
    
    private SampleJForm parent;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Pdf File");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("Load the pdf file");

        jLabel2.setText("Start");

        jLabel3.setText("End");

        jButton2.setText("Convert to Text");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Extract Chars and States");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Extract Matrix");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton2)
                        .addGap(42, 42, 42)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addContainerGap(121, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(114, 114, 114))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    PdfParser pdfParser ;
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
    	if (FILE != "" && DIRECTORY != "") 
    	{
    		jTextField1.setText(FILE);
            
            String fileName = DIRECTORY + "//" + FILE;
            ///Get the no of pages in the pdf file
            try {
				pdfParser = new PdfParser(fileName);
				jTextField2.setText("1");
	            jTextField3.setText( "" + pdfParser.getNoOfPages());
	            
	            FILE = "";
	            DIRECTORY = "";

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    	else
    	{
	    	
	    	try {
	            // TODO add your handling code here: 	
	            
	            FileDialog  dialog = new FileDialog(this, "Load Pdf");
	            dialog.show();
	            jTextField1.setText(dialog.getFile());
	            
	            String fileName = dialog.getDirectory() + "//" + dialog.getFile();
	            ///Get the no of pages in the pdf file
	            pdfParser = new PdfParser(fileName);
	            jTextField2.setText("1");
	            jTextField3.setText( "" + pdfParser.getNoOfPages());
	        } catch (IOException ex) {
	            Logger.getLogger(PdfConverter.class.getName()).log(Level.SEVERE, null, ex);
	        }
    	}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            int start = Integer.parseInt(jTextField2.getText().toString());
            int end = Integer.parseInt(jTextField3.getText().toString());
            Vector<String> parsedPdf = pdfParser.parsePdf(start,end);
            
            jTextArea1.setText(pdfParser.getParsedText());
            
        } catch (IOException ex) {
            Logger.getLogger(PdfConverter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    public String getParsedText()
    {
        return pdfParser.getParsedText();
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
      if( pdfParser != null)
      {
      
        //Now get the text from the text area
         // Here user can manually remove the noise 
        String parsedPdf =  jTextArea1.getSelectedText();
        
        if(parsedPdf == null || parsedPdf.length() == 0 )
        	return;
        Vector<String> knownNoise = new Vector<String>();
        NoiseHandler noiseFilter = new NoiseHandler(3, knownNoise);
        noiseFilter.setPdfConverterInstance(this);
        
        String[] parsedLines = parsedPdf.split("\\n");
        
        Vector<String>  vectorOfLines=  new Vector<String>();
        vectorOfLines.addAll(Arrays.asList(parsedLines));
        
        Vector<String> noiseFreePdf = noiseFilter.deNoisify(vectorOfLines);
        System.out.println("noiseFreePdf has size "+noiseFreePdf.size());
        
        /* MIGHT NEED A FIX LATER Eg: 1. OR  2.  OR 3.
         * Ideally this should be learned
         */
        Vector<String> properLineInput;
        if (pdfStreamCorruption == false) {
        	LineBreakGlue lbGlue = new LineBreakGlue("^[0-9]+\\..*"); 
        	properLineInput = lbGlue.getGluedStream(noiseFreePdf);
        }
        else {
        	properLineInput = noiseFreePdf;
        }
        vectorDump(properLineInput);
        
        if (pdfStreamCorruption)
        	parent.SetParsedText(vectorDump2(properLineInput));
        else
        	parent.SetParsedText(vectorDump(properLineInput));
        
        parent.SetDataRows(properLineInput);  
        
        
      
        this.setVisible(false);
               this.dispatchEvent(new WindowEvent(
                    this, WindowEvent.WINDOW_CLOSING));  
               
               if (pdfStreamCorruption) {
              	   
              	       	   
              	 JOptionPane.showMessageDialog(null, "Irregularities in PDF document detected !!" +
              	 		"\nPlease inspect (and correct if needed) the extracted Data");
              	   
              	   
              	   
                 }
                
      }
    }//GEN-LAST:event_jButton3ActionPerformed

    static String vectorDump(Vector<String> vs) {
         String file="" ;
	 for(int i=0;i<vs.size();i++)
         {
             file += vs.get(i);
             file += "\n" ;
             //System.out.println();
         }
         
         System.out.print(file);
         return file;
         
   }
    
    static String vectorDump2(Vector<String> vs) {
        String file="" ;
        for(int i=0;i<vs.size();i++)
        {
            file += vs.get(i);
        }
        
        System.out.print(file);
        return file;
        
  }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String matrix =  jTextArea1.getSelectedText();
        parent.SetMatrix(matrix);
        
        //System.out.print(matrix);
                      
        this.setVisible(false);
               this.dispatchEvent(new WindowEvent(
                    this, WindowEvent.WINDOW_CLOSING));
                   
               
        
        
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void simulateFileLoad (java.awt.event.ActionEvent evt) 
    {
    	jButton1ActionPerformed(evt);
    }
    
    public void setFileName(String Directory, String filename, java.awt.event.ActionEvent evt)
    {
    	if (Directory != null && filename != null) {
    		DIRECTORY = Directory;
    		FILE = filename;
    		simulateFileLoad(evt);
    	}
    	
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PdfConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PdfConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PdfConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PdfConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                PdfConverter dialog = new PdfConverter(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
